# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI/CD with Maven [master]

# push e' l'evento che triggera il workflow
on:
  push:
    branches: [ master ]
  pull_request: 
    branches: [ master ]
    
jobs:
# jobs raggruppa un insieme di azioni che verranno eseguite
# Ogni job viene eseguito su un server diverso di GitHub
# uses: serve per selezionare una azione
# run: serve per eseguire un comando sulla command-line
#
#
  # mvn test: compila e testa il sorgente compilato, utilizzando un set di test di unita' 
  # adeguato. Questi test non richiedono che il codice sia impacchettato o distribuito
  # per i test viene utilizzato il plugin "maven surefire" (vedi pom.xml).
  maven-compile-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 # effettua il checkout della repository
    - name: Set up JDK 16
      uses: actions/setup-java@v2 # prepara l'enviroment con Java versione 16
      with: # condizioni
        java-version: '16'
        distribution: 'adopt'
        cache: maven
    - name: Test with maven-surefire
      run: mvn test
  

  # npm test: test di unita' lanciati con Jest
  npm-test:
    needs: maven-compile-and-test
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v2
          # anche qua setto l'ambiente java 16
        - name: Set up Node
          uses: actions/setup-node@v2
          with:
            node-version: '14'
            #cache: 'npm' # caching delle dipendenze    
        - run: npm install
        - name: Run test with Jest
          run: npm test
     
  #mvn package: effettua il build del codice compilato e crea il .jar eseguibile.  
  maven-build:
    needs: maven-compile-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 # effettua il checkout della repository
    - name: Set up JDK 16
      uses: actions/setup-java@v2 # prepara l'enviroment con Java versione 16
      with: # condizioni
        java-version: '16'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn -B package
          
  # npm run e2e: effettua un test end-to-end con cypress.
  cypress-e2e-test:
    needs: maven-compile-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          start: mvn
          wait-on: 'http://localhost:8080'
          browser: chrome
          headless: true
          wait-on-timeout: 150
          
  # mvn verify: esegue i controlli sui risultati degli integration test per
  # assicurare il rispetto dei criteri di qualita' 
  maven-integration-test:
    needs: [maven-compile-and-test, cypress-e2e-test, maven-build, npm-test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 # effettua il checkout della repository
    - name: Set up JDK 16
      uses: actions/setup-java@v2 # prepara l'enviroment con Java versione 16
      with: # condizioni
        java-version: '16'
        distribution: 'adopt'
        cache: maven
    - name: Maven verify
      run: mvn -Pprod verify 
      # **NB**: mvn verify esegue preventivamente 'validate', 'compile', 
      # e 'package'. Quindi sarebbe come lanciare questi tre comandi in sequenza.
      # verra' usato il profilo 'prod' per il test
       
  # deploy dell'immagine su Docker-hub.
  build-docker-image:
    runs-on: ubuntu-latest
    needs: maven-integration-test
    steps:  
      - name: Check Out Repo 
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        # non uso l'action: docker/build-push-action@v2, perche'
        # jhipster costruisce l'immagine docker con jdb e non piu'
        # utilizzando il Dockerfile
      - name: Build and push
        run: mvn -Pprod compile jib:build -Djib.to.image=estranged18/warehouse:latest -Djib.to.auth.username=${{ secrets.DOCKER_HUB_USERNAME }} -Djib.to.auth.password=${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  